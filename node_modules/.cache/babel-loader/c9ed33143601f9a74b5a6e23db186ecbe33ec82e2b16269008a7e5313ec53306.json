{"ast":null,"code":"var _jsxFileName = \"/home/hp/Downloads/movies_app/src/components/movieTab/MovieDetail.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Row, Col, Card, CardTitle, CardText, Container, CardImg, Button, Spinner } from \"reactstrap\";\nimport { useParams } from \"react-router-dom\";\nimport UpdateMoviePopup from \"../movieTab/UpdateMoviePopup\";\nimport { ToastContainer } from \"react-toastify\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction MovieDetail(props) {\n  _s();\n  const [movieData, setMovieData] = useState(null);\n  const [originalData, setOriginalData] = useState(null);\n  const {\n    id\n  } = useParams();\n  const [modal, setModal] = useState(false);\n  const toggle = () => setModal(!modal);\n  const [loading, setLoading] = useState(true);\n  const getMoviesData = async () => {\n    const fetchUrl = `https://www.myapifilms.com/imdb/idIMDB?idIMDB=${id}&token=${process.env.REACT_APP_MYAPI_ENDPOINT_TOKEN}`;\n    const fetchOptions = {\n      method: \"GET\",\n      headers: {\n        Authorization: `Bearer 7EwYxT-Z1DCReyP5LWk4NXSn4XVPxffV4mWG-wL_mDU`,\n        \"Content-Type\": \"application/json\"\n      }\n    };\n    const response = await fetch(fetchUrl, fetchOptions).then(response => {\n      return response.json();\n    });\n    setMovieData(response.data.movies[0]);\n    setOriginalData(response.data.movies[0]);\n    setLoading(false);\n  };\n  useEffect(() => {\n    getMoviesData();\n  }, [id]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [loading && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        top: \"50%\",\n        position: \"absolute\",\n        left: '50%'\n      },\n      children: /*#__PURE__*/_jsxDEV(Spinner, {\n        color: \"primary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this), !loading && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Row, {\n        className: \"mt-5\",\n        children: [/*#__PURE__*/_jsxDEV(Col, {\n          sm: \"3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          sm: \"6\",\n          children: movieData && /*#__PURE__*/_jsxDEV(Card, {\n            body: true,\n            children: [/*#__PURE__*/_jsxDEV(CardImg, {\n              alt: \"Card image cap\",\n              src: movieData.urlPoster,\n              style: {\n                height: \"350px\"\n              },\n              width: \"100%\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(CardTitle, {\n              tag: \"h5\",\n              children: movieData.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 65,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(CardText, {\n              children: movieData.simplePlot\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(CardText, {\n              children: [\"Genres:\", \" \", movieData.genres.map((data, index) => {\n                return /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: [data, movieData.genres.length - 2 >= index && \",\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 71,\n                  columnNumber: 25\n                }, this);\n              })]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(CardText, {\n              children: [\"Rating: \", movieData.rating]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(CardText, {\n              children: [\"Votes: \", movieData.votes]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              color: \"primary\",\n              onClick: () => toggle(),\n              children: \"Update\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Col, {\n          sm: \"3\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(UpdateMoviePopup, {\n        modal: modal,\n        toggle: toggle,\n        originalData: originalData,\n        setMovieData: setMovieData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 5\n  }, this);\n}\n_s(MovieDetail, \"2SlZXWQ/W3/MdCAXA+/BWaQExh8=\", false, function () {\n  return [useParams];\n});\n_c = MovieDetail;\nexport default MovieDetail;\nvar _c;\n$RefreshReg$(_c, \"MovieDetail\");","map":{"version":3,"names":["React","useState","useEffect","Row","Col","Card","CardTitle","CardText","Container","CardImg","Button","Spinner","useParams","UpdateMoviePopup","ToastContainer","MovieDetail","props","movieData","setMovieData","originalData","setOriginalData","id","modal","setModal","toggle","loading","setLoading","getMoviesData","fetchUrl","process","env","REACT_APP_MYAPI_ENDPOINT_TOKEN","fetchOptions","method","headers","Authorization","response","fetch","then","json","data","movies","top","position","left","urlPoster","height","title","simplePlot","genres","map","index","length","rating","votes"],"sources":["/home/hp/Downloads/movies_app/src/components/movieTab/MovieDetail.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Row,\r\n  Col,\r\n  Card,\r\n  CardTitle,\r\n  CardText,\r\n  Container,\r\n  CardImg,\r\n  Button,\r\n  Spinner,\r\n} from \"reactstrap\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport UpdateMoviePopup from \"../movieTab/UpdateMoviePopup\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nfunction MovieDetail(props) {\r\n  const [movieData, setMovieData] = useState(null);\r\n  const [originalData, setOriginalData] = useState(null);\r\n  const { id } = useParams();\r\n  const [modal, setModal] = useState(false);\r\n  const toggle = () => setModal(!modal);\r\n  const [loading, setLoading] = useState(true)\r\n  const getMoviesData = async () => {\r\n    const fetchUrl = `https://www.myapifilms.com/imdb/idIMDB?idIMDB=${id}&token=${process.env.REACT_APP_MYAPI_ENDPOINT_TOKEN}`;\r\n    const fetchOptions = {\r\n      method: \"GET\",\r\n      headers: {\r\n        Authorization: `Bearer 7EwYxT-Z1DCReyP5LWk4NXSn4XVPxffV4mWG-wL_mDU`,\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    };\r\n    const response = await fetch(fetchUrl, fetchOptions).then((response) => {\r\n      return response.json();\r\n    });\r\n    setMovieData(response.data.movies[0]);\r\n    setOriginalData(response.data.movies[0]);\r\n    setLoading(false)\r\n  };\r\n  useEffect(() => {\r\n    getMoviesData();\r\n  }, [id]);\r\n\r\n  return (\r\n    <Container>\r\n      {loading && (\r\n        <div style={{ top: \"50%\", position: \"absolute\", left: '50%' }}>\r\n          <Spinner color=\"primary\"></Spinner>\r\n        </div>\r\n      )}\r\n      {!loading && (\r\n        <>\r\n          <Row className=\"mt-5\">\r\n            <Col sm=\"3\"></Col>\r\n            <Col sm=\"6\">\r\n              {movieData && (\r\n                <Card body>\r\n                  <CardImg\r\n                    alt=\"Card image cap\"\r\n                    src={movieData.urlPoster}\r\n                    style={{\r\n                      height: \"350px\",\r\n                    }}\r\n                    width=\"100%\"\r\n                  />\r\n                  <CardTitle tag=\"h5\">{movieData.title}</CardTitle>\r\n                  <CardText>{movieData.simplePlot}</CardText>\r\n                  <CardText>\r\n                    Genres:{\" \"}\r\n                    {movieData.genres.map((data, index) => {\r\n                      return (\r\n                        <span>\r\n                          {data}\r\n                          {movieData.genres.length - 2 >= index && \",\"}\r\n                        </span>\r\n                      );\r\n                    })}\r\n                  </CardText>\r\n                  <CardText>Rating: {movieData.rating}</CardText>\r\n                  <CardText>Votes: {movieData.votes}</CardText>\r\n                  <Button color=\"primary\" onClick={() => toggle()}>\r\n                    Update\r\n                  </Button>\r\n                </Card>\r\n              )}\r\n            </Col>\r\n            <Col sm=\"3\"></Col>\r\n          </Row>\r\n          <UpdateMoviePopup\r\n            modal={modal}\r\n            toggle={toggle}\r\n            originalData={originalData}\r\n            setMovieData={setMovieData}\r\n          />\r\n          <ToastContainer />\r\n        </>\r\n      )}\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default MovieDetail;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}